{"swagger": "2.0", "info": {"x-logo": {"altText": "Quran Journey", "url": "./assets/img/qjLogo.png"}, "title": "Quran Journey API"}, "host": "localhost", "basePath": "/api", "schemes": ["http"], "paths": {"/lesson": {"post": {"summary": "Create a lesson", "tags": ["Lesson Endpoints"], "produces": ["application/json"], "parameters": [{"in": "body", "name": "id", "description": "the lesson to update and it's new attributes", "schema": {"$ref": "#/definitions/Lesson"}}], "responses": {"200": {"description": "Lesson has been created."}}}, "patch": {"summary": "Update a lesson", "tags": ["Lesson Endpoints"], "produces": ["application/json"], "parameters": [{"in": "body", "name": "id", "description": "the lesson to update and it's new attributes", "schema": {"$ref": "#/definitions/Lesson"}}], "responses": {"200": {"description": "Lesson has been updated."}, "404": {"description": "Could not find a lesson with that id."}}}, "delete": {"summary": "Delete a lesson", "tags": ["Lesson Endpoints"], "produces": ["application/json"], "parameters": [{"in": "body", "name": "id", "description": "the lesson to be deleted", "schema": {"$ref": "#/definitions/Lesson"}}], "responses": {"200": {"description": "The Lesson has been deleted.", "schema": {"$ref": "#/definitions/Lesson"}}, "404": {"description": "Could not find a lesson with that id."}}}}, "/lesson/{lesson_id}": {"get": {"summary": "Fetch a lesson by ID", "description": "This is a general fetch and has no parameters. It will fetch all of the lessons in the database.", "tags": ["Lesson Endpoints"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "lesson_id", "type": "integer", "required": true, "example": 1}], "responses": {"200": {"description": "The corresponding lesson.", "schema": {"$ref": "#/definitions/Lesson"}}, "404": {"description": "No lessons found with that ID."}}}}, "/lessons": {"get": {"summary": "Filter lessons", "description": "This fetch acts as a filter based on the given query params. If none are given, then all params are fetched. Operator must be one of: eq, gt, lt, gte, or lte.", "tags": ["Lesson Endpoints"], "produces": ["application/json"], "parameters": [{"in": "query", "name": "property", "type": "string", "required": false, "example": "lesson_date"}, {"in": "query", "name": "operator", "type": "string", "required": false, "example": "eq"}, {"in": "query", "name": "value", "type": "string", "required": false, "example": "2021-5-28"}], "responses": {"200": {"description": "A list of lessons.", "schema": {"type": "array", "items": {"$ref": "#/definitions/Lesson"}}}, "404": {"description": "No lessons found."}}}}, "/reflection": {"get": {"summary": "Get all reflections", "description": "This is used to request all reflections stored in the Reflection Table", "tags": ["Reflection Endpoints"], "produces": ["application/json"], "responses": {"200": {"description": "All reflections have been fetched.", "schema": {"$ref": "#/definitions/Reflection"}}, "404": {"description": "Could not find any reflections."}}}, "post": {"summary": "Create a reflection", "description": "This creates a reflection from the data attribute in the request body", "tags": ["Reflection Endpoints"], "produces": ["application/json"], "parameters": [{"in": "body", "name": "id", "description": "the reflection to update and it's new attributes", "schema": {"$ref": "#/definitions/Reflection"}}], "responses": {"200": {"description": "Reflection has been created."}}}, "patch": {"summary": "Update a reflection", "tags": ["Reflection Endpoints"], "produces": ["application/json"], "parameters": [{"in": "body", "name": "id", "description": "the reflection to update and it's new attributes", "schema": {"$ref": "#/definitions/Reflection"}}], "responses": {"200": {"description": "Reflection has been updated."}, "404": {"description": "Could not find a reflection with that id."}}}, "delete": {"summary": "Delete a reflection", "tags": ["Reflection Endpoints"], "produces": ["application/json"], "parameters": [{"in": "params", "name": "id", "description": "the reflection to be deleted", "schema": {"$ref": "#/definitions/Reflection"}}], "responses": {"200": {"description": "The reflection has been deleted.", "schema": {"$ref": "#/definitions/Reflection"}}, "404": {"description": "Could not find a reflection with that id."}}}}, "/reflection/{reflection_id}": {"get": {"summary": "Fetch a Reflection by ID", "description": "This is a general fetch and has no parameters. It will fetch all of the reflections in the database.", "tags": ["Reflection Endpoints"], "produces": ["application/json"], "parameters": [{"in": "path", "name": "reflection_id", "type": "integer", "required": true, "example": 1}], "responses": {"200": {"description": "The corresponding reflection.", "schema": {"$ref": "#/definitions/Reflection"}}, "404": {"description": "No reflections found with that ID."}}}}}, "definitions": {"Lesson": {"type": "object", "required": ["lesson_id", "lesson_date", "source"], "properties": {"lesson_id": {"type": "integer", "description": "to identify the lesson from others", "example": 1}, "lesson_date": {"type": "date", "description": "to identify the day that the lesson was taught", "example": "2021-10-30T00:00:00.000Z"}, "source": {"type": "string", "description": "a URL to the lesson recording", "example": "https://www.facebook.com/watch/live/?ref=watch_permalink&v=244235014324418"}}}, "Reflection": {"type": "object", "required": ["reflection_id", "verse_explanation_id", "title", "reflection"], "properties": {"reflection_id": {"type": "integer", "description": "to identify the reflection from others", "example": 1}, "verse_explanation_id": {"type": "integer", "description": "to identify the verse that the reflection is refering to", "example": 23}, "title": {"type": "string", "description": "a title to the refelction", "example": "My Reflection"}, "reflection": {"type": "string", "description": "refelction on verse", "example": "I have..."}}}}, "tags": [{"name": "Lesson", "x-display": "Lesson", "description": "<SchemaDefinition schemaRef=\"#/components/schemas/Lesson\" />"}, {"name": "Reflection", "x-display": "Reflection", "description": "<SchemaDefinition schemaRef=\"#/components/schemas/Reflection\" />"}], "x-tagGroups": [{"name": "API Endpoints", "tags": [["Lesson Endpoints"], ["Reflection Endpoints"]]}, {"name": "Models", "tags": ["Lesson", "Reflection"]}]}